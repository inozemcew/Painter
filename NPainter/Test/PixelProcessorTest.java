package NPainter;

import Painter.Screen.Pixel;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.awt.*;

import static NPainter.NScreen.Table;

/**
 * Created by ainozemtsev on 29.09.16.
 */
public class PixelProcessorTest {

    private final NScreen.Table[] tables = new Table[]{
            Table.PAPER, Table.PAPER, Table.PAPER, Table.PAPER, Table.INK, Table.INK
    };
    private final int[] shifts = new int[]{
            0, 1, 2, 3, 0, 1
    };
    private final byte[] oldBytes = new byte[]{
            0x00, 0x01, 0x02, 0x03, 0x10, 0x20, 0x30, 0x11, 0x22, 0x33, 0x12, 0x13, 0x21, 0x31, 0x23, 0x32
    };

    @org.testng.annotations.Test
    public void testSplit() throws Exception {

    }

    @org.testng.annotations.Test
    public void testCombine() throws Exception {

    }

    private void doTest(int[][] rs, PixelProcessor mode) {
        Pixel pixel;
        Point pos = new Point();
        for (int i = 0; i < oldBytes.length; i++) {
            for (int j = 0; j < tables.length; j++) {
                pixel = new Pixel(tables[j],0, shifts[j]);
                for (int x = 0; x < 2; x++) {
                    pos.setLocation(x,0);
                    final byte actual = mode.packPixel(pixel, oldBytes[i], pos);
                    final int r = (rs[i][j] >> x*8) & 255;
                    System.out.println(String.format("0x%02x@%d + ", oldBytes[i],x) + pixel.table + pixel.shift + " -> "
                            + String.format("0x%02x",actual) +" / "+ String.format("0x%02x",r));
                    Assert.assertEquals(actual,r );
                }
            }
        }
    }

    @Test
    public void testMODE5packPixel() throws Exception {
        int rs[][] = {
                {0x0000, 0x1001, 0x2112, 0x3113, 0x2002, 0x3003},  // 00
                {0x0100, 0x1101, 0x2312, 0x3213, 0x2202, 0x3303},  // 01
                {0x0200, 0x1101, 0x2312, 0x3213, 0x2202, 0x3303},  // 02
                {0x0300, 0x1101, 0x2312, 0x3213, 0x2202, 0x3303},  // 03
                {0x0010, 0x1011, 0x2123, 0x3132, 0x2022, 0x3033},  // 10
                {0x0020, 0x1011, 0x2123, 0x3132, 0x2022, 0x3033},  // 20
                {0x0030, 0x1011, 0x2123, 0x3132, 0x2022, 0x3033},  // 30
                {0x0110, 0x1111, 0x2323, 0x3232, 0x2222, 0x3333},  // 11
                {0x0220, 0x1111, 0x2323, 0x3232, 0x2222, 0x3333},  // 22
                {0x0330, 0x1111, 0x2323, 0x3232, 0x2222, 0x3333},  // 33
                {0x1200, 0x1101, 0x2312, 0x3213, 0x2202, 0x3303},  // 12
                {0x1300, 0x1101, 0x2312, 0x3213, 0x2202, 0x3303},  // 13
                {0x0021, 0x1011, 0x2123, 0x3132, 0x2022, 0x3033},  // 21
                {0x0031, 0x1011, 0x2123, 0x3132, 0x2022, 0x3033},  // 31
                {0x1221, 0x1111, 0x2323, 0x3232, 0x2222, 0x3333},  // 23
                {0x1331, 0x1111, 0x2323, 0x3232, 0x2222, 0x3333}   // 32

        };
        doTest(rs, PixelProcessor.MODE5);

    }

    @Test
    public void testMode4packPixel() throws Exception {
        int rs[][] = {
                {0x0000, 0x1001, 0x0000, 0x1001, 0x2002, 0x3003},  // 00
                {0x0100, 0x1101, 0x0100, 0x1101, 0x2102, 0x3103},  // 01
                {0x0200, 0x1201, 0x0200, 0x1201, 0x2202, 0x3203},  // 02
                {0x0300, 0x1301, 0x0300, 0x1301, 0x2302, 0x3303},  // 03
                {0x0010, 0x1011, 0x0010, 0x1011, 0x2012, 0x3013},  // 10
                {0x0020, 0x1021, 0x0020, 0x1021, 0x2022, 0x3023},  // 20
                {0x0030, 0x1031, 0x0030, 0x1031, 0x2032, 0x3033},  // 30
                {0x0110, 0x1111, 0x0110, 0x1111, 0x2112, 0x3113},  // 11
                {0x0220, 0x1221, 0x0220, 0x1221, 0x2222, 0x3223},  // 22
                {0x0330, 0x1331, 0x0330, 0x1331, 0x2332, 0x3333},  // 33
                {0x0210, 0x1211, 0x0210, 0x1211, 0x2212, 0x3213},  // 12
                {0x0310, 0x1311, 0x0310, 0x1311, 0x2312, 0x3313},  // 13
                {0x0120, 0x1121, 0x0120, 0x1121, 0x2122, 0x3123},  // 21
                {0x0130, 0x1131, 0x0130, 0x1131, 0x2132, 0x3133},  // 31
                {0x0320, 0x1321, 0x0320, 0x1321, 0x2322, 0x3323},  // 23
                {0x0230, 0x1231, 0x0230, 0x1231, 0x2232, 0x3233}   // 32
        };
        doTest(rs, PixelProcessor.MODE4);
    }

    @Test
    public void testMODE6packPixel() throws Exception {
        int rs[][] = {
                {0x0000, 0x1001, 0x1313, 0x3131, 0x2002, 0x3003},  // 00
                {0x0100, 0x1101, 0x1313, 0x3131, 0x2102, 0x3003},  // 01
                {0x0200, 0x1201, 0x1313, 0x3131, 0x2202, 0x3203},  // 02
                {0x0300, 0x1201, 0x1313, 0x3131, 0x2302, 0x3303},  // 03
                {0x0010, 0x1011, 0x1313, 0x3131, 0x2012, 0x3003},  // 10
                {0x0020, 0x1021, 0x1313, 0x3131, 0x2022, 0x3023},  // 20
                {0x0030, 0x1021, 0x1313, 0x3131, 0x2032, 0x3033},  // 30
                {0x0110, 0x1111, 0x1313, 0x3131, 0x2112, 0x3003},  // 11
                {0x0220, 0x1221, 0x1313, 0x3131, 0x2222, 0x3223},  // 22
                {0x0330, 0x1221, 0x1313, 0x3131, 0x2332, 0x3333},  // 33
                {0x0210, 0x1211, 0x1313, 0x3131, 0x2212, 0x3203},  // 12
                {0x0000, 0x1111, 0x1313, 0x3131, 0x2222, 0x3333},  // 13
                {0x0120, 0x1121, 0x1313, 0x3131, 0x2122, 0x3023},  // 21
                {0x0000, 0x1111, 0x1313, 0x3131, 0x2222, 0x3333},  // 31
                {0x0320, 0x1221, 0x1313, 0x3131, 0x2322, 0x3323},  // 23
                {0x0230, 0x1221, 0x1313, 0x3131, 0x2232, 0x3233}   // 32
        };
        doTest(rs, PixelProcessor.MODE6);
    }

    @Test
    public void testMODEXpackPixel() throws Exception {
        int rs[][] = {
                {0x0000, 0x1001, 0x1221, 0x3131, 0x2002, 0x3003},  // 00
                {0x0100, 0x1101, 0x1321, 0x3131, 0x2202, 0x3303},  // 01
                {0x0200, 0x1101, 0x1321, 0x3131, 0x2202, 0x3203},  // 02
                {0x0300, 0x1101, 0x1321, 0x3131, 0x2302, 0x3303},  // 03
                {0x0010, 0x1011, 0x1213, 0x3131, 0x2022, 0x3033},  // 10
                {0x0020, 0x1011, 0x1213, 0x3131, 0x2022, 0x3023},  // 20
                {0x0030, 0x1011, 0x1213, 0x3131, 0x2032, 0x3033},  // 30
                {0x0110, 0x1111, 0x1313, 0x3131, 0x2222, 0x3333},  // 11
                {0x0220, 0x1111, 0x1313, 0x3131, 0x2222, 0x3223},  // 22
                {0x0330, 0x1111, 0x1313, 0x3131, 0x2332, 0x3333},  // 33
                {0x0012, 0x1011, 0x1213, 0x3131, 0x2022, 0x3033},  // 12
                {0x2112, 0x1111, 0x1313, 0x3131, 0x2222, 0x3333},  // 13
                {0x2100, 0x1101, 0x1321, 0x3131, 0x2202, 0x3303},  // 21
                {0x0000, 0x1111, 0x1313, 0x3131, 0x2222, 0x3333},  // 31
                {0x0320, 0x1111, 0x1313, 0x3131, 0x2322, 0x3323},  // 23
                {0x0230, 0x1111, 0x1313, 0x3131, 0x2232, 0x3233}   // 32
        };
        doTest(rs, PixelProcessor.MODEX);
    }
}